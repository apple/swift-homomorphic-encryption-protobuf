// Copyright 2024 Apple Inc. and the Swift Homomorphic Encryption project authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package apple.swift_homomorphic_encryption.pnns.v1;

// Pre-computed values for matrix-vector multiplication using baby-step, giant-step algorithm.
// See Section 6.3 of <https://eprint.iacr.org/2018/244.pdf>.
message BabyStepGiantStep {
  // Dimension of the vector; "D" in the reference.
  uint32 vector_dimension = 1;
  // Baby step; "g" in the reference.
  uint32 baby_step = 2;
  // Giant step; "h" in the reference.
  uint32 giant_step = 3;
}

// Different algorithms for packing a matrix of scalar values into plaintexts / ciphertexts.
message MatrixPacking {
  // Different packing formats.
  oneof plaintext_packing_type {
    // Dense row packing.
    MatrixPackingDenseRow dense_row = 1;

    /// Packs the values using a generalized diagonal packing.
    ///
    /// Includes modifications for the baby-step, giant-step algorithm from Section 6.3 of
    /// <https://eprint.iacr.org/2018/244.pdf>.
    MatrixPackingDiagonal diagonal = 2;

    /// As many rows of data are packed sequentially into each SIMD plaintext
    /// row as possible, such that no data row is split across multiple SIMD rows, and
    /// each data row is zero-padded to the next power of two length.
    /// The rows in the final plaintext are repeated as many times as possible within the plaintext,
    /// with the constraint that either all or none of the entries stored within the last plaintext
    /// row are repeated.
    MatrixPackingDenseColumn dense_column = 3;
  }
}

// As many rows of data are packed sequentially into each SIMD row as possible,
// such that no data row is split across multiple SIMD rows, and
// each data row is zero-padded to the next power of two length.
// The rows in the final plaintext/ciphertext are repeated as many times as possible within the plaintext/ciphertext,
// with the constraint that either all or none of the entries stored within the last plaintext/ciphertext
// row are repeated.
message MatrixPackingDenseRow {}

// Packs the values using a generalized diagonal packing.
message MatrixPackingDiagonal {
  reserved 1;
  // Diagonals are rotated according to the baby-step, giant-step algorithm from Section 6.3 of <https://eprint.iacr.org/2018/244.pdf>.
  BabyStepGiantStep baby_step_giant_step = 2;
}

// As many columns of data are packed sequentially into each SIMD row as possible, such that no SIMD row
// contains data from multiple columns.
message MatrixPackingDenseColumn {}
