// Copyright 2024-2025 Apple Inc. and the Swift Homomorphic Encryption project authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package apple.swift_homomorphic_encryption.api.pir.v1;

import "apple/swift_homomorphic_encryption/api/shared/v1/api_shared.proto";
import "apple/swift_homomorphic_encryption/pir/v1/pir.proto";
import "apple/swift_homomorphic_encryption/pir/v1/pir_algorithm.proto";
import "apple/swift_homomorphic_encryption/v1/he.proto";

// Configuration for one shard of the PIR database.
message PIRShardConfig {
  // Number of entries in the shard.
  uint64 num_entries = 1;
  // Size in bytes of entries in the shard.
  uint64 entry_size = 2;
  // Dimensions that make up the hypercube.
  repeated uint64 dimensions = 3;
  // Unique identifier for the shard.
  optional string shard_id = 4;
  // Whether to compress vectorized PIR response.
  optional bool compress_vectorized_pir_response = 5;
  // The additional "batching" introduced in vectorized pir to accommodate large entry size.
  optional uint64 vectorized_pir_internal_batching_size = 6;
}

// Configuration for one PIR usecase.
message PIRConfig {
  // Encryption parameters.
  apple.swift_homomorphic_encryption.v1.EncryptionParameters encryption_parameters = 1;
  // Configuration for each shard; can be overridden by `pir_shard_configs` (field 10).
  repeated PIRShardConfig shard_configs = 2;
  // Parameters specific to KeywordPIR.
  apple.swift_homomorphic_encryption.pir.v1.KeywordPirParameters keyword_pir_params = 3;
  // Server-side PIR algorithm.
  apple.swift_homomorphic_encryption.pir.v1.PirAlgorithm algorithm = 4;
  // Maximum number of queries allowed in a single request.
  uint64 batch_size = 5;
  // Hash of EvaluationKeyConfig.
  bytes evaluation_key_config_hash = 6;
  reserved 7, 8, 9;
  // Configuration for each shard; overrides `shard_configs` (field 2).
  PIRShardConfigs pir_shard_configs = 10;
}

// Configuration for PIR shards.
message PIRShardConfigs {
  // Different shard configuration formats.
  oneof shard_configs {
    // Repeated shard configuration.
    PIRFixedShardConfig repeated_shard_config = 1;
  }
}

// Every shard configuration is the same.
message PIRFixedShardConfig {
  // Shard configuration for all the shards.
  PIRShardConfig shard_config = 1;
  // Number of shards.
  uint32 shard_count = 2;
}

// PIR Request.
message PIRRequest {
  // Shard index where this request should be routed. Can be overridden by shard_id.
  uint32 shard_index = 1;
  // Encrypted query.
  apple.swift_homomorphic_encryption.pir.v1.EncryptedIndices query = 2;
  // Evaluation key metadata.
  apple.swift_homomorphic_encryption.api.shared.v1.EvaluationKeyMetadata evaluation_key_metadata = 3;
  // Hash of the `PIRConfig` used to construct the query.
  bytes configuration_hash = 4;
  // If set, route request to a shard with this `shard_id` instead of `shard_index`.
  optional string shard_id = 5;
  // If set, evaluation key to query with. Will override evaluation key stored server-side.
  optional apple.swift_homomorphic_encryption.api.shared.v1.EvaluationKey evaluation_key = 6;
}

// PIR Response.
message PIRResponse {
  // Encrypted replies, each of which is a ciphertext vector.
  repeated apple.swift_homomorphic_encryption.v1.SerializedCiphertextVec replies = 1;
}

// PIR OPRF Request.
message OPRFRequest {
  // Serialized query.
  bytes query_element = 1;
  // Identifier for PirConfig used to construct this request.
  bytes config_id = 2;
}

// PIR OPRF Response.
message OPRFResponse {
  // Serialized output of OPRF.
  bytes evaluated_element = 1;
  // Proof of OPRF evaluation.
  bytes proof = 2;
}
