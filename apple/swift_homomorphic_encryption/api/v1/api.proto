// Copyright 2024-2025 Apple Inc. and the Swift Homomorphic Encryption project authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package apple.swift_homomorphic_encryption.api.v1;

import "apple/swift_homomorphic_encryption/api/pir/v1/pir.proto";
import "apple/swift_homomorphic_encryption/api/pnns/v1/pnns.proto";
import "apple/swift_homomorphic_encryption/api/shared/v1/api_shared.proto";

// Request for server side configurations.
message ConfigRequest {
  // List of usecases to fetch configs for.
  // When set to empty array, all configs will be returned.
  repeated string usecases = 1;
  // For each usecase, the existing config id, if one exists.
  repeated bytes existing_config_ids = 2;
}

// Usecase configuration.
message Config {
  // Configuration.
  oneof config {
    // Configuration for a PIR usecase.
    apple.swift_homomorphic_encryption.api.pir.v1.PIRConfig pir_config = 1;
    // Configuration for a PNNS usecase.
    apple.swift_homomorphic_encryption.api.pnns.v1.PNNSConfig pnns_config = 2;
  }
  // Unique identifier for the configuration.
  bytes config_id = 3;
  // Indicator that the config is the same config as in the ConfigRequest. If set, all other fields can be unset.
  bool reuse_existing_config = 4;
}

// Server side configurations.
message ConfigResponse {
  // usecases with associated configurations.
  map<string, Config> configs = 1;
  // Configuration & status of evaluation keys.
  repeated apple.swift_homomorphic_encryption.api.shared.v1.KeyStatus key_info = 2;
}

// Container for multiple requests.
message Requests {
  // Requests.
  repeated Request requests = 1;
}

// Container for multiple responses.
message Responses {
  // Responses.
  repeated Response responses = 1;
}

// Generic request.
message Request {
  // Usecase identifier.
  string usecase = 1;
  // Generic request.
  oneof request {
    // PIR request.
    apple.swift_homomorphic_encryption.api.pir.v1.PIRRequest pir_request = 2;
    // PNNS request.
    apple.swift_homomorphic_encryption.api.pnns.v1.PNNSRequest pnns_request = 3;
    // OPRF request.
    apple.swift_homomorphic_encryption.api.pir.v1.OPRFRequest oprf_request = 4;
  }
}

// Generic response.
message Response {
  // Generic response.
  oneof response {
    // Response to a `PIRRequest`.
    apple.swift_homomorphic_encryption.api.pir.v1.PIRResponse pir_response = 1;
    // Response to a `PNNSRequest`.
    apple.swift_homomorphic_encryption.api.pnns.v1.PNNSResponse pnns_response = 2;
    // Response to `OPRFRequest`.
    apple.swift_homomorphic_encryption.api.pir.v1.OPRFResponse oprf_response = 3;
  }
}

// Error returned by failed API calls.
message Error {
  // Client configuration not found.
  //
  // Client should retry after fetching new configuration. May include new configuration
  // in `config_response`. In this case, client should use this returned configuration and retry.
  message ConfigVersionNotFound {
    // ConfigResponse that client should use for subsequent requests.
    optional ConfigResponse config_response = 1;
  }

  // Evaluation key not found.
  //
  // Client should upload evaluation key and retry.
  message EvaluationKeyNotFound {}

  // Request can not be parsed successfully.
  message InvalidRequest {}

  // Internal error.
  message InternalError {}

  // Type of error encountered while processing request.
  oneof error_type {
    // Client configuration not found.
    ConfigVersionNotFound config_version_not_found = 1;
    // Client evaluation key not found.
    EvaluationKeyNotFound evaluation_key_not_found = 2;
    // Request can not be parsed.
    InvalidRequest invalid_request = 3;
    // Internal error.
    InternalError internal_error = 4;
  }
}
